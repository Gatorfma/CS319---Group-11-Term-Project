# Generated by Django 5.2 on 2025-05-06 20:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='InstructorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_faculty', models.BooleanField(default=True, help_text='Indicates if the instructor is a faculty member')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if instructor is active in the current semester')),
            ],
            options={
                'verbose_name': 'Instructor Profile',
                'verbose_name_plural': 'Instructor Profiles',
            },
        ),
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if staff member is currently active')),
            ],
            options={
                'verbose_name': 'Staff Profile',
                'verbose_name_plural': 'Staff Profiles',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=20, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['student_id'],
            },
        ),
        migrations.CreateModel(
            name='TAProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ta_type', models.CharField(choices=[('PHD', 'PhD Student'), ('GRAD', 'Graduate Student')], default='GRAD', max_length=4)),
                ('is_active', models.BooleanField(default=True)),
                ('is_assignable', models.BooleanField(default=True)),
                ('proctor_type', models.IntegerField(choices=[(0, 'Cannot proctor any exam'), (1, 'Can only proctor assigned courses'), (2, 'Can proctor any exam')], default=0)),
                ('total_workload', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('max_workload', models.DecimalField(decimal_places=2, default=-1, max_digits=6)),
                ('max_absent_days', models.IntegerField(default=-1)),
            ],
            options={
                'verbose_name': 'TA Profile',
                'verbose_name_plural': 'TA Profiles',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('TA', 'Teaching Assistant'), ('INSTRUCTOR', 'Instructor'), ('SECRETARY', 'Secretary'), ('DEPT_CHAIR', 'Department Chair'), ('DEAN', 'Dean'), ('ADMIN', 'Administrator')], default='TA', help_text='Determines menu items & permissions.', max_length=20)),
                ('employee_id', models.CharField(blank=True, max_length=20, null=True)),
                ('department', models.CharField(blank=True, max_length=50, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
