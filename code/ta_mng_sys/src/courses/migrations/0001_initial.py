# Generated by Django 5.2 on 2025-05-06 20:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('building', models.CharField(blank=True, help_text='Building name or code, e.g. "ENGR", "Main"', max_length=100)),
                ('room_number', models.CharField(help_text='Room number or identifier, e.g. "101", "B-12"', max_length=20)),
                ('capacity', models.PositiveIntegerField(help_text='Standard seating capacity for classes')),
                ('exam_capacity', models.PositiveIntegerField(help_text='Number of seats available when arranged for exam')),
            ],
            options={
                'verbose_name': 'Classroom',
                'verbose_name_plural': 'Classrooms',
                'ordering': ['building', 'room_number'],
                'unique_together': {('building', 'room_number')},
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_code', models.CharField(help_text='e.g. "CS", "IE", "EE"', max_length=5)),
                ('course_code', models.PositiveIntegerField(help_text='Numeric code, e.g. 101, 402')),
                ('title', models.CharField(help_text='Course title, e.g. "Object-Oriented Software Engineering"', max_length=200)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['department_code', 'course_code'],
                'unique_together': {('department_code', 'course_code')},
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('duration', models.DurationField(help_text='Duration of the exam as a timedelta')),
                ('num_proctors_required', models.PositiveSmallIntegerField(help_text='Number of TAs needed to proctor')),
                ('number_of_students', models.PositiveIntegerField(help_text='Total students taking the exam')),
                ('assigned_tas', models.ManyToManyField(blank=True, help_text='TAs assigned to proctor this exam', related_name='proctored_exams', to='accounts.taprofile')),
                ('classroom', models.ForeignKey(blank=True, help_text='Room where the exam will be held', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exams', to='courses.classroom')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='courses.course')),
                ('students', models.ManyToManyField(blank=True, help_text='List of students taking this exam', related_name='exams', to='accounts.student')),
            ],
            options={
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
                'ordering': ['date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='CourseOffering',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.CharField(help_text='e.g. "Fall 2025", "Spring 2026"', max_length=20)),
                ('section', models.PositiveSmallIntegerField(help_text='Section number, e.g. 1, 2, 3')),
                ('max_capacity', models.PositiveIntegerField(help_text='Maximum number of students allowed')),
                ('enrolled_count', models.PositiveIntegerField(default=0, help_text='Current count of enrolled students')),
                ('course', models.ForeignKey(help_text='The course this offering belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='offerings', to='courses.course')),
                ('instructors', models.ManyToManyField(blank=True, help_text='Instructors teaching this offering', limit_choices_to={'role': 'INSTRUCTOR'}, related_name='course_offerings', to=settings.AUTH_USER_MODEL)),
                ('students', models.ManyToManyField(blank=True, help_text='Students enrolled in this offering', related_name='course_offerings', to='accounts.student')),
                ('tas', models.ManyToManyField(blank=True, help_text='TAs assigned to assist this offering', related_name='course_offerings', to='accounts.taprofile')),
            ],
            options={
                'verbose_name': 'Course Offering',
                'verbose_name_plural': 'Course Offerings',
                'ordering': ['course__department_code', 'course__course_code', 'semester', 'section'],
                'unique_together': {('course', 'semester', 'section')},
            },
        ),
    ]
